name: image build

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  push_to_registry:
    name: Build, test and push Docker image to GitHub Packages
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Docker image build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Docker container test-run
        id: smoke-test
        run: |
          docker run \
          -e DJANGO_SUPERUSER_EMAIL=test@test.com \
          -e DJANGO_SUPERUSER_PASSWORD=test \
          -e DJANGO_SUPERUSER_USERNAME=test \
          -e SUPERUSER_EMAIL=test@test.com \
          -e DB_ENGINE=sqlite3 \
          -e DB_NAME=test \
          -e APP_SECRET_KEY=y9Sag4UWWLHyp \
          --name testct -d -p 8080:8080 ${{ steps.meta.outputs.tags }}

          sleep 45

          while $(seq 1 10) ; do
          echo -e "CT is $(docker inspect --format='{{.State.Health.Status}}' testct) \n"
          docker logs testct
          echo ""
          sleep 30
          done

          if [ "$(docker inspect --format='{{.State.Health.Status}}' testct)" != "healthy" ]; then
              exit 1
          fi

#          -e APP_SECRET_KEY=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13; echo 2>/dev/null) \

      - name: Docker image push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
